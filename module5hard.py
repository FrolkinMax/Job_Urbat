# Дополнительное практическое задание по модулю: "Классы и объекты."
# Цель: Применить знания полученные в модуле, решив задачу повышенного уровня сложности.
# Задание "Свой YouTube":
# Университет Urban подумывает о создании своей платформы, где будут размещаться дополнительные полезные
# ролики на тему IT (юмористические, интервью и т.д.). Конечно же для старта написания интернет ресурса
# требуются хотя бы базовые знания программирования.
# Именно вам выпала возможность продемонстрировать их, написав небольшой набор классов, которые будут выполнять похожий
# функционал на сайте.
# Всего будет 3 класса: UrTube, Video, User.
# Общее ТЗ:
# Реализовать классы для взаимодействия с платформой, каждый из которых будет содержать методы добавления видео,
# авторизации и регистрации пользователя и т.д.
# Подробное ТЗ:
# Каждый объект класса User должен обладать следующими атрибутами и методами:
# Атриубуты: nickname(имя пользователя, строка), password(в хэшированном виде, число), age(возраст, число)
# Каждый объект класса Video должен обладать следующими атрибутами и методами:
# Атриубуты: title(заголовок, строка), duration(продолжительность, секунды), time_now(секунда остановки (изначально 0)),
# adult_mode(ограничение по возрасту, bool (False по умолчанию))
# Каждый объект класса UrTube должен обладать следующими атрибутами и методами:
#  Атриубты: users(список объектов User), videos(список объектов Video), current_user(текущий пользователь, User)
# Метод log_in, который принимает на вход аргументы: nickname, password и пытается найти пользователя в users с такими же
# логином и паролем. Если такой пользователь существует, то current_user меняется на найденного. Помните, что password
# передаётся в виде строки, а сравнивается по хэшу.
# Метод register, который принимает три аргумента: nickname, password, age, и добавляет пользователя в список, если
# пользователя не существует (с таким же nickname). Если существует,
# выводит на экран: "Пользователь {nickname} уже существует". После регистрации, вход выполняется автоматически.
# Метод log_out для сброса текущего пользователя на None.
# Метод add, который принимает неограниченное кол-во объектов класса Video и все добавляет в videos, если с таким
# же названием видео ещё не существует. В противном случае ничего не происходит.
# Метод get_videos, который принимает поисковое слово и возвращает список названий всех видео, содержащих поисковое слово.
# Следует учесть, что слово 'UrbaN' присутствует в строке 'Urban the best' (не учитывать регистр).
# Метод watch_video, который принимает название фильма, если не находит точного совпадения(вплоть до пробела), то ничего
# не воспроизводится, если же находит - ведётся отчёт в консоль на какой секунде ведётся просмотр. После текущее время
# просмотра данного видео сбрасывается.
# Для метода watch_video так же учитывайте следующие особенности:
# Для паузы между выводами секунд воспроизведения можно использовать функцию sleep из модуля time.
# Воспроизводить видео можно только тогда, когда пользователь вошёл в UrTube. В противном случае выводить
# в консоль надпись: "Войдите в аккаунт, чтобы смотреть видео"
# Если видео найдено, следует учесть, что пользователю может быть отказано в просмотре, т.к.
# есть ограничения 18+. Должно выводиться сообщение: "Вам нет 18 лет, пожалуйста покиньте страницу"
# После воспроизведения нужно выводить: "Конец видео"

import time

"""
Атриубуты: nickname(имя пользователя, строка), password(в хэшированном виде, число), age(возраст, число)
"""
class User:

    def __init__(self, nickname, password, age):
        self.nickname = nickname
        self.password = hash(password) # Храним пароль в хэшированном виде
        self.age = age

"""
Атриубуты: title(заголовок, строка), duration(продолжительность, секунды), time_now(секунда остановки (изначально 0)),
 adult_mode(ограничение по возрасту, bool (False по умолчанию))
"""
class Video:

    def __init__(self, title, duration, adult_mode=False):
        self.title = title
        self.duration = duration
        self.time_now = 0 # Изначально время просмотра 0
        self.adult_mode = adult_mode # По умолчанию ограничение по возрасту False

"""
Атриубты: users(список объектов User), videos(список объектов Video), current_user(текущий пользователь, User)
"""
class UrTube:

    def __init__(self):
        self.users = []  # Список пользователей
        self.videos = []  # Список видео
        self.current_user = None  # Текущий пользователь

    def log_in(self, nickname, password):
        """Авторизация пользователя"""
        for user in self.users:
            if user.nickname == nickname and user.password == hash(password):
                self.current_user = user
                print(f"Пользователь {nickname} вошел в систему.")
                return
        print("Неверный логин или пароль.")

    def register(self, nickname, password, age):
        """Регистрация нового пользователя"""
        for user in self.users:
            if user.nickname == nickname:
                print(f"Пользователь {nickname} уже существует")
                return
        new_user = User(nickname, password, age)
        self.users.append(new_user)
        self.current_user = new_user  # Автоматический вход после регистрации
        print(f"Пользователь {nickname} зарегистрирован и вошел в систему.")

    def log_out(self):
        """Выход пользователя из системы"""
        self.current_user = None
        print("Пользователь вышел из системы.")

    def add(self, *videos):
        """Добавление видео на платформу"""
        for video in videos:
            if not any(v.title == video.title for v in self.videos):
                self.videos.append(video)
                print(f"Видео '{video.title}' добавлено на платформу.")
            else:
                print(f"Видео с названием '{video.title}' уже существует.")

    def get_videos(self, search_term):
        """Поиск видео по ключевому слову (не учитывая регистр)"""
        search_term = search_term.lower()
        result = [video.title for video in self.videos if search_term in video.title.lower()]
        return result

    def watch_video(self, title):
        """Воспроизведение видео с учётом авторизации и возрастных ограничений"""
        if self.current_user is None:
            print("Войдите в аккаунт, чтобы смотреть видео")
            return

        for video in self.videos:
            if video.title == title:
                if video.adult_mode and self.current_user.age < 18:
                    print("Вам нет 18 лет, пожалуйста покиньте страницу")
                    return
                # Воспроизведение видео
                print(f"Начало воспроизведения: {video.title}")
                for second in range(1, video.duration + 1):
                    print(second, end=" ", flush=True)
                    time.sleep(1)
                print("\nКонец видео")
                video.time_now = 0  # Сброс времени просмотра
                return
        print("Видео не найдено.")


# Проверка
ur = UrTube()
v1 = Video('Лучший язык программирования 2024 года', 200)
v2 = Video('Для чего девушкам парень программист?', 10, adult_mode=True)

# Добавление видео
ur.add(v1, v2)

# Проверка поиска
print(ur.get_videos('лучший'))
print(ur.get_videos('ПРОГ'))

# Проверка на вход пользователя и возрастное ограничение
ur.watch_video('Для чего девушкам парень программист?')
ur.register('vasya_pupkin', 'lolkekcheburek', 13)
ur.watch_video('Для чего девушкам парень программист?')
ur.register('urban_pythonist', 'iScX4vIJClb9YQavjAgF', 25)
ur.watch_video('Для чего девушкам парень программист?')

# Проверка входа в другой аккаунт
ur.register('vasya_pupkin', 'F8098FM8fjm9jmi', 55)
print(ur.current_user.nickname)  # print(ur.current_user) заменил на print(ur.current_user.nickname)
# так как выдает в противном случае -> <__main__.User object at 0x000001A470D9A450>
# Попытка воспроизведения несуществующего видео
ur.watch_video('Лучший язык программирования 2024 года!')